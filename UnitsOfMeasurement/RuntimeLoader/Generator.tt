<#@ template language="C#" #>
<#@ assembly name="Man.UnitsOfMeasurement.Parser.dll" #>
<#@ import namespace="Man.UnitsOfMeasurement" #>
/*******************************************************************************

    Units of Measurement for C# applications

    Copyright (C) Marek Aniola

    This program is provided to you under the terms of the license
    as published at https://github.com/mangh/unitsofmeasurement


********************************************************************************/
using System;

namespace <#= __projectNamespace #>
{
<#
    for(int i = __unitstartindex; i < __units.Count; i++)
    {
        ProcessUnit(__units[i]);
    }
    for(int i = __scalestartindex; i < __scales.Count; i++)
    {
        ProcessScale(__scales[i]);
    }
#>
}

<#+
    void ProcessUnit(UnitType u)
    {
        string Unit = u.Name;
        string UnitProxy = Unit + "_Proxy";
        string Sense = u.Sense.Code;
        string Family = (u.Prime == null) ? (__family++).ToString() : string.Format("{0}.Family", u.FamilyPrime().Name);
        string Format = u.Format;
        string Tags = string.Format("\"{0}\"", string.Join("\", \"", u.Tags));
        
        string Factor = u.Factor.Code;
        string Value = u.Factor.Value.Type.Name;
        string One = u.Factor.Value.Type.One.CSString();
        string Zero = u.Factor.Value.Type.Zero.CSString();
#>
    public partial struct <#= Unit #> : IQuantity<<#= Value #>>, IEquatable<<#= Unit #>>, IComparable<<#= Unit #>>, IFormattable
    {
        #region Fields
        internal readonly <#= Value #> m_value;
        #endregion

        #region Properties
        public <#= Value #> Value { get { return m_value; } }
        Unit<<#= Value #>> IQuantity<<#= Value #>>.Unit { get { return <#= Unit #>.Proxy; } }
        #endregion

        #region Constructor(s)
        public <#= Unit #>(<#= Value #> value)
        {
            m_value = value;
        }
        #endregion

        #region Conversions
        public static explicit operator <#= Unit #>(<#= Value #> q) { return new <#= Unit #>(q); }
<#+
        foreach (MeasureType s in u.Relatives())
        {
            string Relative = ((UnitType)s).Name;
#>
        public static explicit operator <#= Unit #>(<#= Relative #> q) { return new <#= Unit #>((<#= Unit #>.Factor / <#= Relative #>.Factor) * q.Value); }
<#+
        }
#>
        public static <#= Unit #> From(IQuantity<<#= Value #>> q)
        {
            if (q.Unit.Family != <#= Unit #>.Family) throw new InvalidOperationException(string.Format("Cannot convert \"{0}\" to \"<#= Unit #>\"", q.GetType().Name));
            return new <#= Unit #>((<#= Unit #>.Factor / q.Unit.Factor) * q.Value);
        }
        #endregion

        #region IObject / IEquatable<<#= Unit #>>
        public override int GetHashCode() { return m_value.GetHashCode(); }
        public override bool /* IObject */ Equals(object obj) { return (obj is <#= Unit #>) && Equals((<#= Unit #>)obj); }
        public bool /* IEquatable<<#= Unit #>> */ Equals(<#= Unit #> other) { return this.m_value == other.m_value; }
        #endregion

        #region Comparison / IComparable<<#= Unit #>>
        public static bool operator ==(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value == rhs.m_value; }
        public static bool operator !=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value != rhs.m_value; }
        public static bool operator <(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value < rhs.m_value; }
        public static bool operator >(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value > rhs.m_value; }
        public static bool operator <=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value <= rhs.m_value; }
        public static bool operator >=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value >= rhs.m_value; }
        public int /* IComparable<<#= Unit #>> */ CompareTo(<#= Unit #> other) { return this.m_value.CompareTo(other.m_value); }
        #endregion

        #region Arithmetic
        // Inner:
        public static <#= Unit #> operator +(<#= Unit #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs.m_value + rhs.m_value); }
        public static <#= Unit #> operator -(<#= Unit #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs.m_value - rhs.m_value); }
        public static <#= Unit #> operator ++(<#= Unit #> q) { return new <#= Unit #>(q.m_value + <#= One #>); }
        public static <#= Unit #> operator --(<#= Unit #> q) { return new <#= Unit #>(q.m_value - <#= One #>); }
        public static <#= Unit #> operator -(<#= Unit #> q) { return new <#= Unit #>(-q.m_value); }
        public static <#= Unit #> operator *(<#= Value #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs * rhs.m_value); }
        public static <#= Unit #> operator *(<#= Unit #> lhs, <#= Value #> rhs) { return new <#= Unit #>(lhs.m_value * rhs); }
        public static <#= Unit #> operator /(<#= Unit #> lhs, <#= Value #> rhs) { return new <#= Unit #>(lhs.m_value / rhs); }
        public static <#= Value #> operator /(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value / rhs.m_value; }
        // Outer:
<#+
        foreach (BinaryOperation o in u.OuterOperations)
        {
            string lhsValue = (o.Lhs.IsPredefined) ? "lhs" : "lhs.Value";
            string rhsValue = (o.Rhs.IsPredefined) ? "rhs" : "rhs.Value";
            string action = (o.Operation == "^") ? "*" : o.Operation;
            string retValue = (o.Result.IsPredefined) ? 
                string.Format("{0} {1} {2}", lhsValue, action, rhsValue) :
                string.Format("new {0}({1} {2} {3})", o.Result.Name, lhsValue, action, rhsValue);
#>
        public static <#= o.Result.Name #> operator <#= o.Operation #>(<#= o.Lhs.Name #> lhs, <#= o.Rhs.Name #> rhs) { return <#= retValue #>; }
<#+
        }
#>
        #endregion

        #region Formatting
        public override string ToString() { return ToString(<#= Unit #>.Format, null); }
        public string ToString(string format) { return ToString(format, null); }
        public string ToString(IFormatProvider fp) { return ToString(<#= Unit #>.Format, fp); }
        public string /* IFormattable */ ToString(string format, IFormatProvider fp)
        {
            return string.Format(fp, format ?? <#= Unit #>.Format, Value, <#= Unit #>.Symbol.Default);
        }
        #endregion

        #region Static fields
        private static readonly Dimension s_sense = <#= Sense #>;
        private static readonly int s_family = <#= Family #>;
        private static /*mutable*/ <#= Value #> s_factor = <#= Factor #>;
        private static /*mutable*/ string s_format = "<#= Format #>";
        private static readonly SymbolCollection s_symbol = new SymbolCollection(<#= Tags #>);
        private static readonly Unit<<#= Value #>> s_proxy = new <#= UnitProxy #>();

        private static readonly <#= Unit #> s_one = new <#= Unit #>(<#= One #>);
        private static readonly <#= Unit #> s_zero = new <#= Unit #>(<#= Zero #>);
        #endregion

        #region Static Properties
        public static Dimension Sense { get { return s_sense; } }
        public static int Family { get { return s_family; } }
        public static <#= Value #> Factor { get { return s_factor; } set { s_factor = value; } }
        public static string Format { get { return s_format; } set { s_format = value; } }
        public static SymbolCollection Symbol { get { return s_symbol; } }
        public static Unit<<#= Value #>> Proxy { get { return s_proxy; } }

        public static <#= Unit #> One { get { return s_one; } }
        public static <#= Unit #> Zero { get { return s_zero; } }
        #endregion
    }

    public partial class <#= UnitProxy #> : Unit<<#= Value #>>
    {
        #region Properties
        public override int Family { get { return <#= Unit #>.Family; } }
        public override Dimension Sense { get { return <#= Unit #>.Sense; } }
        public override SymbolCollection Symbol { get { return <#= Unit #>.Symbol; } }
        public override <#= Value #> Factor { get { return <#= Unit #>.Factor; } set { <#= Unit #>.Factor = value; } }
        public override string Format { get { return <#= Unit #>.Format; } set { <#= Unit #>.Format = value; } }
        #endregion

        #region Constructor(s)
        public <#= UnitProxy #>() :
            base(typeof(<#= Unit #>))
        {
        }
        #endregion

        #region Methods
        public override IQuantity<<#= Value #>> Create(<#= Value #> value)
        {
            return new <#= Unit #>(value);
        }
        public override IQuantity<<#= Value #>> From(IQuantity<<#= Value #>> quantity)
        {
            return <#= Unit #>.From(quantity);
        }
        #endregion
    }
<#+
    }
#>

<#+
    void ProcessScale(ScaleType s)
    {
        string Scale = s.Name;
        string ScaleProxy = Scale + "_Proxy";
        string Unit = s.Unit.Name;
        string Offset = s.Offset.Code;
        string Family = (s.Prime == null) ? (__family++).ToString() : string.Format("{0}.Family", s.FamilyPrime().Name);
        string Format = s.Format;

        string Value = s.Unit.Factor.Value.Type.Name;
        string One = s.Unit.Factor.Value.Type.One.CSString();
        string Zero = s.Unit.Factor.Value.Type.Zero.CSString();

        if (!string.IsNullOrWhiteSpace(s.RefPoint))
        {
#>
    [ScaleReferencePoint("<#= s.RefPoint #>")]
<#+
        }
#>
    public partial struct <#= Scale #> : ILevel<<#= Value #>>, IEquatable<<#= Scale #>>, IComparable<<#= Scale #>>, IFormattable
    {
        #region Fields
        internal readonly <#= Unit #> m_level;
        #endregion

        #region Properties
        public <#= Unit #> Level { get { return m_level; } }
        public <#= Unit #> NormalizedLevel { get { return (m_level - <#= Scale #>.Offset); } }

        IQuantity<<#= Value #>> ILevel<<#= Value #>>.Level { get { return Level; } }
        IQuantity<<#= Value #>> ILevel<<#= Value #>>.NormalizedLevel { get { return NormalizedLevel; } }
        Scale<<#= Value #>> ILevel<<#= Value #>>.Scale { get { return <#= Scale #>.Proxy; } }
        #endregion

        #region Constructor(s)
        public <#= Scale #>(<#= Unit #> level)
        {
            m_level = level;
        }
        public <#= Scale #>(<#= Value #> level) :
            this(new <#= Unit #>(level))
        {
        }
        #endregion

        #region Conversions
        public static explicit operator <#= Scale #>(<#= Value #> q) { return new <#= Scale #>(q); }
        public static explicit operator <#= Scale #>(<#= Unit #> q) { return new <#= Scale #>(q); }

<#+
        foreach (MeasureType x in s.Relatives())
        {
            string Relative = ((ScaleType)x).Name;
#>
        public static explicit operator <#= Scale #>(<#= Relative #> q) { return new <#= Scale #>((<#= Unit #>)(q.NormalizedLevel) + <#= Scale #>.Offset); }
<#+
        }
#>
        public static <#= Scale #> From(ILevel<<#= Value #>> q)
        {
            if (q.Scale.Family != <#= Scale #>.Family) throw new InvalidOperationException(string.Format("Cannot convert \"{0}\" to \"<#= Scale #>\".", q.GetType().Name));
            return new <#= Scale #>(<#= Unit #>.From(q.NormalizedLevel) + <#= Scale #>.Offset);
        }
        public static <#= Scale #> From(IQuantity<<#= Value #>> q)
        {
            Scale<<#= Value #>> scale = Catalog.Scale(<#= Scale #>.Family, q.Unit);
            if(scale == null) throw new InvalidOperationException(string.Format("Cannot convert \"{0}\" to \"<#= Scale #>\".", q.GetType().Name));
            return <#= Scale #>.From(scale.Create(q.Value));
        }
        #endregion

        #region IObject / IEquatable<<#= Scale #>>
        public override int GetHashCode() { return m_level.GetHashCode(); }
        public override bool /* IObject */ Equals(object obj) { return (obj is <#= Scale #>) && Equals((<#= Scale #>)obj); }
        public bool /* IEquatable<<#= Scale #>> */ Equals(<#= Scale #> other) { return this.m_level == other.m_level; }
        #endregion

        #region Comparison / IComparable<<#= Scale #>>
        public static bool operator ==(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level == rhs.m_level; }
        public static bool operator !=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level != rhs.m_level; }
        public static bool operator <(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level < rhs.m_level; }
        public static bool operator >(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level > rhs.m_level; }
        public static bool operator <=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level <= rhs.m_level; }
        public static bool operator >=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level >= rhs.m_level; }
        public int /* IComparable<<#= Scale #>> */ CompareTo(<#= Scale #> other) { return this.m_level.CompareTo(other.m_level); }
        #endregion

        #region Arithmetic
        public static <#= Scale #> operator +(<#= Scale #> lhs, <#= Unit #> rhs) { return new <#= Scale #>(lhs.m_level + rhs); }
        public static <#= Scale #> operator +(<#= Unit #> lhs, <#= Scale #> rhs) { return new <#= Scale #>(lhs + rhs.m_level); }
        public static <#= Scale #> operator -(<#= Scale #> lhs, <#= Unit #> rhs) { return new <#= Scale #>(lhs.m_level - rhs); }
        public static <#= Unit #> operator -(<#= Scale #> lhs, <#= Scale #> rhs) { return (lhs.m_level - rhs.m_level); }
        public static <#= Scale #> operator -(<#= Scale #> q) { return new <#= Scale #>(-q.m_level); }
        public static <#= Scale #> operator ++(<#= Scale #> q) { return q + <#= Unit #>.One; }
        public static <#= Scale #> operator --(<#= Scale #> q) { return q - <#= Unit #>.One; }
        #endregion

        #region Formatting
        public override string ToString() { return ToString(<#= Scale #>.Format, null); }
        public string ToString(string format) { return ToString(format, null); }
        public string ToString(IFormatProvider fp) { return ToString(<#= Scale #>.Format, fp); }
        public string /* IFormattable */ ToString(string format, IFormatProvider fp)
        {
            return m_level.ToString(format ?? <#= Scale #>.Format, fp);
        }
        #endregion

        #region Static fields
        private static readonly <#= Unit #> s_offset /* from <#= s.RefPointNormalized #> reference level */ = new <#= Unit #>(<#= Offset #>);
        private static readonly int s_family = <#= Family #>;
        private static /*mutable*/ string s_format = "<#= Format #>";
        private static readonly Scale<<#= Value #>> s_proxy = new <#= ScaleProxy #>();

        private static readonly <#= Scale #> s_zero = new <#= Scale #>(<#= Zero #>);
        #endregion
        
        #region Static properties
        public static <#= Unit #> Offset { get { return s_offset; } }
        public static int Family { get { return s_family; } }
        public static string Format { get { return s_format; } set { s_format = value; } }
        public static Scale<<#= Value #>> Proxy { get { return s_proxy; } }

        public static <#= Scale #> Zero { get { return s_zero; } }
        #endregion
    }
    public partial class <#= ScaleProxy #> : Scale<<#= Value #>>
    {
        #region Properties
        public override int Family { get { return <#= Scale #>.Family; } }
        public override Unit Unit { get { return <#= Unit #>.Proxy; } }
        public override IQuantity<<#= Value #>> Offset { get { return <#= Scale #>.Offset; } }
        public override string Format { get { return <#= Scale #>.Format; } set { <#= Scale #>.Format = value; } }
        #endregion

        #region Constructor(s)
        public <#= ScaleProxy #>() :
            base(typeof(<#= Scale #>))
        {
        }
        #endregion

        #region Methods
        public override ILevel<<#= Value #>> Create(<#= Value #> value)
        {
            return new <#= Scale #>(value);
        }
        public override ILevel<<#= Value #>> From(ILevel<<#= Value #>> level)
        {
            return <#= Scale #>.From(level);
        }
        public override ILevel<<#= Value #>> From(IQuantity<<#= Value #>> quantity)
        {
            return <#= Scale #>.From(quantity);
        }
        #endregion
    }
<#+
    }
#>
